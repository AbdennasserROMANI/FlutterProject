#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <semaphore.h>

FILE* file;
char line[500];
int size=0,s,j,k,count=1;
sem_t semaphore;

int getSize();
void* readValue(void*);

struct toshare {
    int thread;
    int lin;
    float value;
};

float SharedMamory=0;

int main(int argc, char* argv[]){
    
    pthread_t th[5];
    sem_init(&semaphore,0,1);

    size = getSize();
    
    s=size;
    file = fopen("input.txt", "r");
    
    for(j=0;j<5;j++){
        
        if(size<=(5-j) && size>0){
            s=1;
            size=size-s;
        }else if(size>(5-j)){
            s=(size-1)/(5-j)+1;
            size=size-s;
        }else{
            s=0;
            size=size-s;
        }
        
        sem_init(&semaphore,0,s+1);
        
        for(int i=0;i<s;i++){
            fgets(line, sizeof(line), file);
            struct toshare *a = (struct toshare *)malloc(sizeof(struct toshare));
            a->thread=j+1;
            a->lin=count;
            a->value=atof(line);
            pthread_create(&th[j],NULL,&readValue,(void *)a);
            count++;
        }
        
        pthread_join(th[j],NULL);
        printf("Shared Resource: %.2f\n",SharedMamory);

    }
    
    fclose(file);
    sem_destroy(&semaphore);
    
    return 0;
}

int getSize(){
    
    file = fopen("input.txt", "r");
    int s=0;
    while (fgets(line, sizeof(line), file)) {
        s++;
    }
    fclose(file);
    return s;
    
}

void* readValue(void* args){
    
    sem_wait(&semaphore);
    SharedMamory+=((struct toshare*)args)->value;
    printf("Thread %d reads %d. line. The value is %.2f\n",((struct toshare*)args)->thread,((struct toshare*)args)->lin,((struct toshare*)args)->value);
    sem_post(&semaphore);
    free(args);
    return 0;
    
}
